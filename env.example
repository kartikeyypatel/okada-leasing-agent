# Okada Leasing Agent Environment Configuration
# Copy this file to .env and fill in your actual values

# =============================================================================
# GOOGLE API CONFIGURATION
# =============================================================================
# Required: Google API key for Gemini LLM and embeddings
# Get from: https://console.cloud.google.com/apis/credentials
GOOGLE_API_KEY=your_google_api_key_here

# =============================================================================
# MONGODB CONFIGURATION
# =============================================================================
# Required: MongoDB connection string
# Examples:
#   Local: mongodb://localhost:27017
#   Atlas: mongodb+srv://username:password@cluster.mongodb.net
#   Replica Set: mongodb://host1:27017,host2:27017,host3:27017/dbname?replicaSet=rs0
MONGODB_URI=mongodb://localhost:27017

# Required: Database name for the application
MONGO_DATABASE_NAME=okada_leasing

# =============================================================================
# GOOGLE CALENDAR INTEGRATION
# =============================================================================
# Required: Path to Google Calendar credentials JSON file
# Get from: https://console.cloud.google.com/apis/credentials
# Download the credentials file and place it in your project directory
GOOGLE_CALENDAR_CREDENTIALS_PATH=./credentials.json

# =============================================================================
# CHROMADB CONFIGURATION
# =============================================================================

# ChromaDB Storage Directory (for local persistent storage)
# Default: ./user_chroma_db
# This directory will be created if it doesn't exist
# Ensure the application has write permissions to this location
CHROMA_PERSIST_DIRECTORY=./user_chroma_db

# ChromaDB Remote Server Configuration (optional)
# Leave empty to use local persistent storage
# Set both CHROMA_HOST and CHROMA_PORT to use remote ChromaDB server
# Examples:
#   Local server: localhost
#   Remote server: chromadb.example.com
#   Docker service: chromadb-service
CHROMA_HOST=

# ChromaDB Server Port (optional)
# Default ChromaDB port is 8000
# Only used when CHROMA_HOST is set
CHROMA_PORT=

# ChromaDB Collection Prefix
# Default: okada_user_
# This prefix is used to create unique collection names for each user
# Format: {prefix}{hash_of_user_email}
# Change this for different environments (dev, staging, prod)
CHROMA_COLLECTION_PREFIX=okada_user_

# =============================================================================
# DEPLOYMENT SPECIFIC CONFIGURATIONS
# =============================================================================

# Development Configuration Example:
# CHROMA_PERSIST_DIRECTORY=./dev_chroma_db
# CHROMA_COLLECTION_PREFIX=dev_okada_user_

# Staging Configuration Example:
# CHROMA_HOST=staging-chromadb.example.com
# CHROMA_PORT=8000
# CHROMA_COLLECTION_PREFIX=staging_okada_user_

# Production Configuration Example:
# CHROMA_HOST=prod-chromadb.example.com
# CHROMA_PORT=8000
# CHROMA_COLLECTION_PREFIX=prod_okada_user_

# =============================================================================
# ADDITIONAL CONFIGURATION OPTIONS
# =============================================================================

# Optional: Override default ports and hosts
# HOST=0.0.0.0
# PORT=8000

# Optional: Enable debug mode (not recommended for production)
# DEBUG=false

# Optional: Configure logging level
# LOG_LEVEL=INFO

# =============================================================================
# SECURITY NOTES
# =============================================================================
# 1. Never commit this file with real values to version control
# 2. Use environment-specific values for different deployments
# 3. Ensure proper file permissions (600) for security
# 4. Use secure secret management systems in production
# 5. Regularly rotate API keys and credentials

# =============================================================================
# CHROMADB DEPLOYMENT MODES
# =============================================================================

# Mode 1: Local Persistent Storage (Development)
# - Stores data in local directory
# - No separate server required
# - Good for development and testing
# Configuration:
#   CHROMA_PERSIST_DIRECTORY=./user_chroma_db
#   CHROMA_HOST=
#   CHROMA_PORT=

# Mode 2: Remote ChromaDB Server (Production)
# - Connects to separate ChromaDB server
# - Better performance and scalability
# - Recommended for production
# Configuration:
#   CHROMA_HOST=your-chromadb-server.com
#   CHROMA_PORT=8000
#   CHROMA_PERSIST_DIRECTORY=  # Not used in remote mode

# Mode 3: Docker Compose
# - ChromaDB runs as Docker service
# - Easy deployment and management
# Configuration:
#   CHROMA_HOST=chromadb-service
#   CHROMA_PORT=8000

# =============================================================================
# TROUBLESHOOTING
# =============================================================================

# Common Issues and Solutions:

# 1. ChromaDB Connection Failed
#    - Check if ChromaDB server is running (remote mode)
#    - Verify CHROMA_HOST and CHROMA_PORT are correct
#    - Ensure firewall allows connections
#    - Check ChromaDB server logs

# 2. Permission Denied (Local Mode)
#    - Ensure CHROMA_PERSIST_DIRECTORY is writable
#    - Check directory permissions
#    - Verify disk space availability

# 3. Performance Issues
#    - Consider using remote ChromaDB server
#    - Increase system memory
#    - Reduce batch sizes in application

# 4. Data Persistence Issues
#    - Verify CHROMA_PERSIST_DIRECTORY path
#    - Check if directory exists and is accessible
#    - Ensure proper backup procedures

# =============================================================================
# ENVIRONMENT VALIDATION
# =============================================================================

# Test your configuration:
# 1. Run: curl http://localhost:8000/api/health/chromadb
# 2. Check application logs for ChromaDB connection messages
# 3. Upload a test document and verify it's indexed
# 4. Restart application and verify data persistence 